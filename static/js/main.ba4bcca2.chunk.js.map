{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","findTitle","filterBy","handleChange","event","value","target","setState","filterTodo","props","todos","filter","todo","title","toLocaleLowerCase","includes","toLowerCase","completed","this","onFind","newTodos","console","log","className","action","type","onChange","name","map","classNames","htmlFor","id","readOnly","onClick","userId","React","Component","request","url","a","fetch","response","ok","Error","status","statusText","json","CurrentUser","user","loadDataError","loadData","prevProps","selectedUserId","onClean","email","phone","App","findUserById","clearUser","ReactDOM","render","document","getElementById"],"mappings":"+WAcaA,EAAb,4MACEC,MAAQ,CACNC,UAAW,GACXC,SAAU,OAHd,EAMEC,aAAe,SAACC,GACd,IAAQC,EAAUD,EAAME,OAAhBD,MAER,EAAKE,SAAS,CACZN,UAAWI,KAVjB,EAcEG,WAAa,WACX,MAAgC,EAAKR,MAA7BC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,SAgBnB,OAfkB,EAAKO,MAAfC,MAEeC,QAAO,SAAAC,GAC5B,OAAQV,GACN,IAAK,MAML,QACE,OAAQU,EAAKC,MAAMC,oBAAqBC,SAASd,EAAUe,eAL7D,IAAK,SACH,OAAQJ,EAAKK,UACf,IAAK,YACH,OAASL,EAAKK,eAzBxB,4CAkCE,WAAU,IAAD,OACChB,EAAciB,KAAKlB,MAAnBC,UACR,EAA0BiB,KAAKT,MAAvBC,EAAR,EAAQA,MAAOS,EAAf,EAAeA,OAETC,EAAWF,KAAKV,aAKtB,OAFAa,QAAQC,IAAI,QAASZ,GAGnB,mCACE,sBAAKa,UAAU,WAAf,UACE,wCADF,eAGG,IACD,uBAAMC,OAAO,GAAb,UACE,uBACEnB,MAAOJ,EACPwB,KAAK,OACLC,SAAU,SAACtB,GACT,EAAKD,aAAaC,MAItB,yBACEuB,KAAK,cACLD,SAAU,SAACtB,GACT,IAAQC,EAAUD,EAAME,OAAhBD,MAER,EAAKG,aACL,EAAKD,SAAS,CAAEL,SAAUG,KAN9B,UASE,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,6BAGFe,EAASQ,KAAI,SAAChB,GAAD,OACb,qBAAmBW,UAAU,2BAA7B,SACE,oBAAIA,UAAU,iBAAd,SACE,qBACEA,UAAWM,IACT,iBACA,CACE,6BAA8BjB,EAAKK,UACnC,0BAA2BL,EAAKK,YALtC,UASE,wBAAOa,QAAQ,SAAf,UACE,uBAAOC,GAAG,SAASN,KAAK,WAAWO,UAAQ,IAC3C,4BAAIpB,EAAKC,WAGX,yBACEU,UAAU,iEAKVE,KAAK,SACLpB,MAAM,GACN4B,QAAS,kBAAMd,EAAOP,EAAKsB,SAR7B,sBAWGtB,EAAKsB,gBA3BJtB,EAAKmB,gBAzE3B,GAA8BI,IAAMC,WCZvBC,G,MAAO,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACEC,MAAM,GAAD,OAHb,qCAGa,OAAeF,IADtB,WACfG,EADe,QAGPC,GAHO,sBAIb,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,cAAkCH,EAASI,aAJ9B,gCAOdJ,EAASK,QAPK,2CAAH,uDCaPC,EAAb,4MACE/C,MAAe,CACbgD,KAAM,KACNC,eAAe,GAHnB,uDAME,WACE/B,KAAKgC,aAPT,gCAUE,SAAmBC,GACjB,IAAQC,EAAmBlC,KAAKT,MAAxB2C,eAEJD,EAAUC,iBAAmBA,GAC/BlC,KAAKgC,aAdX,6DAkBE,8BAAAX,EAAA,sEAEYa,EAAmBlC,KAAKT,MAAxB2C,eAFZ,SDpByCf,EAAQ,UAAD,OCuBjBe,IAH/B,OAGUJ,EAHV,OAKI9B,KAAKX,SAAS,CACZyC,OAAMC,eAAe,IAN3B,gDASI/B,KAAKX,SAAS,CACZyC,KAAM,KAAMC,eAAe,IAVjC,yDAlBF,0EAiCE,WACE,MAAgC/B,KAAKlB,MAA7BgD,EAAR,EAAQA,KAAMC,EAAd,EAAcA,cACNI,EAAYnC,KAAKT,MAAjB4C,QAER,OACE,qCACGL,GAEG,sBAAKzB,UAAU,cAAf,UACE,oBAAIA,UAAU,qBAAd,SACE,kDAEG,IACAyB,EAAKjB,QAIV,oBAAIR,UAAU,oBAAd,SAAmCyB,EAAKrB,OACxC,mBAAGJ,UAAU,qBAAb,SAAmCyB,EAAKM,QACxC,mBAAG/B,UAAU,qBAAb,SAAmCyB,EAAKO,QACxC,wBACEhC,UAAU,eACVE,KAAK,SACLQ,QAASoB,EAHX,sBASLJ,GAAiB,sDA9D1B,GAAiCd,IAAMC,WCH1BoB,EAAb,4MACExD,MAAe,CACboD,eAAgB,EAChB1C,MAAO,IAHX,EAYE+C,aAAe,SAACvB,GAAD,OAAoB,EAAK3B,SAAS,CAAE6C,eAAgBlB,KAZrE,EAcEwB,UAAY,kBAAM,EAAKnD,SAAS,CAAE6C,eAAgB,KAdpD,8FAME,4BAAAb,EAAA,sEFN4BF,EAAQ,UEMpC,OACQ3B,EADR,OAGEQ,KAAKX,SAAS,CAAEG,UAHlB,gDANF,0EAgBE,WACE,MAAkCQ,KAAKlB,MAA/BU,EAAR,EAAQA,MAAO0C,EAAf,EAAeA,eAEf,OACE,sBAAK7B,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACEb,MAAOA,EACPS,OAAQD,KAAKuC,iBAIjB,qBAAKlC,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACG6B,EACC,cAAC,EAAD,CACEA,eAAgBA,EAChBjC,OAAQD,KAAKuC,aACbJ,QAASnC,KAAKwC,YAEd,8BApChB,GAAyBvB,IAAMC,WCT/BuB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.ba4bcca2.chunk.js","sourcesContent":["import React, { ChangeEvent } from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ninterface State {\n  findTitle: string;\n  filterBy: string;\n}\n\ninterface Props {\n  todos: Todo[]\n  onFind:(userId:number) => void\n}\n\nexport class TodoList extends React.Component<Props, State> {\n  state = {\n    findTitle: '',\n    filterBy: 'All',\n  };\n\n  handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    this.setState({\n      findTitle: value,\n    });\n  };\n\n  filterTodo = () => {\n    const { findTitle, filterBy } = this.state;\n    const { todos } = this.props;\n\n    const newTodos = todos.filter(todo => {\n      switch (filterBy) {\n        case 'All':\n          return (todo.title.toLocaleLowerCase()).includes(findTitle.toLowerCase());\n        case 'Active':\n          return (todo.completed);\n        case 'Completed':\n          return (!todo.completed);\n        default:\n          return (todo.title.toLocaleLowerCase()).includes(findTitle.toLowerCase());\n      }\n    });\n\n    return newTodos;\n  };\n\n  render() {\n    const { findTitle } = this.state;\n    const { todos, onFind } = this.props;\n\n    const newTodos = this.filterTodo();\n\n    // eslint-disable-next-line no-console\n    console.log('Todos', todos);\n\n    return (\n      <>\n        <div className=\"TodoList\">\n          <h2>Todos:</h2>\n          Search Todo:\n          {' '}\n          <form action=\"\">\n            <input\n              value={findTitle}\n              type=\"text\"\n              onChange={(event) => {\n                this.handleChange(event);\n              }}\n            />\n\n            <select\n              name=\"filterTodos\"\n              onChange={(event) => {\n                const { value } = event.target;\n\n                this.filterTodo();\n                this.setState({ filterBy: value });\n              }}\n            >\n              <option value=\"All\">All</option>\n              <option value=\"Active\">Active</option>\n              <option value=\"Completed\">Completed</option>\n            </select>\n          </form>\n          { newTodos.map((todo:Todo) => (\n            <div key={todo.id} className=\"TodoList__list-container\">\n              <ul className=\"TodoList__list\">\n                <li\n                  className={classNames(\n                    'TodoList__item',\n                    {\n                      'TodoList__item--unchecked': !todo.completed,\n                      'TodoList__item--checked': todo.completed,\n                    },\n                  )}\n                >\n                  <label htmlFor=\"123123\">\n                    <input id=\"123123\" type=\"checkbox\" readOnly />\n                    <p>{todo.title}</p>\n                  </label>\n\n                  <button\n                    className=\"\n              TodoList__user-button\n              TodoList__user-button--selected\n              button\n            \"\n                    type=\"button\"\n                    value=\"\"\n                    onClick={() => onFind(todo.userId)}\n                  >\n                    User&nbsp;#\n                    {todo.userId}\n                  </button>\n                </li>\n              </ul>\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n}\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = async (url: string) => {\n  const response = await fetch(`${BASE_URL}${url}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n};\n\nexport const getTodos = () => request('/todos');\nexport const getUser = (userId: number) => request(`/users/${userId}`);\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api';\n\ninterface Props {\n  selectedUserId: number\n  onFind: (userId:number) => void\n  onClean: () => void\n}\n\ninterface State {\n  user: User | null\n  loadDataError: boolean\n}\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n    loadDataError: false,\n  };\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { selectedUserId } = this.props;\n\n    if (prevProps.selectedUserId !== selectedUserId) {\n      this.loadData();\n    }\n  }\n\n  async loadData() {\n    try {\n      const { selectedUserId } = this.props;\n      const user = await getUser(selectedUserId);\n\n      this.setState({\n        user, loadDataError: false,\n      });\n    } catch (error) {\n      this.setState({\n        user: null, loadDataError: true,\n      });\n    }\n  }\n\n  render() {\n    const { user, loadDataError } = this.state;\n    const { onClean } = this.props;\n\n    return (\n      <>\n        {user\n          && (\n            <div className=\"CurrentUser\">\n              <h2 className=\"CurrentUser__title\">\n                <span>\n                  Selected user:\n                  {' '}\n                  {user.id}\n                </span>\n              </h2>\n\n              <h3 className=\"CurrentUser__name\">{user.name}</h3>\n              <p className=\"CurrentUser__email\">{user.email}</p>\n              <p className=\"CurrentUser__phone\">{user.phone}</p>\n              <button\n                className=\"button-clear\"\n                type=\"button\"\n                onClick={onClean}\n              >\n                clear\n              </button>\n            </div>\n          )}\n        {loadDataError && <p>User not found</p>}\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[];\n}\n\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({ todos });\n  }\n\n  findUserById = (userId: number) => this.setState({ selectedUserId: userId });\n\n  clearUser = () => this.setState({ selectedUserId: 0 });\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            onFind={this.findUserById}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                onFind={this.findUserById}\n                onClean={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}